<!DOCTYPE html>
<html lang="zh-Hant">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>太陽圖</title>
    <link href="https://cdn.jsdelivr.net/npm/@mdi/font/css/materialdesignicons.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/vuetify@2.6.10/dist/vuetify.min.css" rel="stylesheet">
    <link href="./Content/base.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
    <script src="https://cdn.jsdelivr.net/npm/vuetify@2.6.10/dist/vuetify.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/xlsx@0.17.4/dist/xlsx.full.min.js"></script>
    <script src="./Content/common.js"></script>
    <script src="./Content/getRealTime.js"></script>
    <style>     
        .style1{

        }   
    </style>     
</head>

<body>
    <div id="app">
        <v-app>
            <v-container style="max-width: 95%;">
                <v-row no-gutters>
                    <v-col col="2">
                        <a href="JavaScript: location.reload(true);">Refresh page</a>
                        data count {{[...new Set( filteredData.map(obj => obj.stock_number)) ].length}}
                    </v-col>
                    <v-col col="1">
                        <v-btn color="primary" @click="sortBy=['Type1','總價差']">類別/總價差</v-btn>
                        <v-btn color="primary" @click="sortBy=['Type1','箱型力量_5均']">類別/箱型力量_5均</v-btn>
                    </v-col>
                    <v-col col="1">
                        <v-btn color="primary"
                            @click="jsonData=jsonData.filter(x=>x.Volume_Oscillator > -20 && x.量能差 > 0 && x.漲跌BY3天 > -7 && x.量能均>5  )">
                            x.Volume_Oscillator > -20 && x.量能差 > 0 && x.漲跌BY3天 > -7 && x.量能均>5 </v-btn>
                    </v-col>
                </v-row>

                <v-data-table disable-pagination fixed-header height="90vh" hide-default-footer :headers="headers"
                    :items="filteredData" :items-per-page="-1" item-key="id" :sort-by.sync="sortBy"
                    :sort-desc.sync="sortDesc" style="white-space: nowrap;">
                    <template v-slot:item.stock_number="{ item }">
                        <v-btn text @click="openDialog(item)">
                            {{ item.stock_number }} {{ item.Type0 }}
                        </v-btn>
                    </template>
                    <template v-slot:item.type="{ item }">
                        <v-btn text @click="openDialog(item)">
                            {{ item.stock_number }} {{ item.Type }}
                        </v-btn>
                    </template>
                    <template v-slot:item.desc="{ item }">
                        <td v-html="formatDesc(item.desc)"></td>
                    </template>

                    <template v-slot:[`item.${header.value}`]="{ item }" v-for="header in headers.slice(1,arrcount)"
                        :key="header.value">
                        <template v-for="(data, index) in item.datalist.filter(x => x.日期 === header.value)"
                            :key="index">

                            <div style="position: sticky; height: 100%;" :class="[
                                     (item.highlight_date == header.value) ? 'hightlight_line' : '',
                                     (item.highlight_date <= header.value  && item.highlight_date !='') ? 'hightlight_line_under' : '',

                                     (data._quote>1 && data.量能 >5  &&  data.量能差 >5  && data.成交股數 > 5000  )  ||
                                     (data._quote>6 &&  data.量能差 > 10   )  ||
                                     (data.MA_break)
                                     ? 'hightlight_line_box' : '',
                                    ].filter(Boolean)">

                                
                                <BR />
                                <div>
                                    <span :style="{ 
                                                color: parseInt(data._quote) > 5 ? 'red' : 
                                                       parseInt(data._quote) > 2 ? 'orange' : 
                                                       'gray' 
                                            }" style="font-size: xx-small; margin-left: 30%;">
                                        漲跌:{{data._quote}}
                                    </span>
                                    <BR />
                                    <span
                                        :style="{ 
                                        color: (parseInt(data.漲跌BY3天) > 4 && parseInt(data._quote) > 0  ) ? 'red' : 'gray'  }">
                                        (價)漲跌BY3天 :{{data.漲跌BY3天 }}
                                    </span>

                                    <BR />
                                    <span :style="{
                                                color: (parseInt(data.增縮BY3天) > 0 &&  data.量能 > 0 ) ? 'gray' : 'gray' }"
                                        style="font-size: xx-small; margin-left: 30%;">
                                        增縮3天 :{{data.增縮BY3天 }}
                                    </span>

                                    <BR />
                                    <span :style="{ 
                                                color: (parseInt(data.量能.split('.')[0]) > 30 &&  data.量能差 > 0  && parseInt( data.量能 )> parseInt( data.量能均 )+3) ? 'red' : 
                                                       (parseInt(data.量能.split('.')[0]) > 15 &&  data.量能差 > 0  && parseInt( data.量能 )> parseInt( data.量能均 )  ) ? 'orange' : 
                                                       'gray' 
                                        }">
                                        (量)量能:{{ data.量能.split('.')[0] }}(差{{data.量能差}}) (均{{data.量能均}})
                              
                                    </span>
                                </div>
                                <div class="style1" style="  height:35px">
                                    <div :style="{ backgroundColor:  
                                    parseInt(data.Volume_Oscillator) > 50  ? '#ff4d4d60' :  
                                    parseInt(data.Volume_Oscillator) > 40  ? '#ff4d4d50' : 
                                    parseInt(data.Volume_Oscillator) > 30  ? '#ff4d4d40' : 
                                    parseInt(data.Volume_Oscillator) > 20  ? '#ff4d4d30' : 
                                    parseInt(data.Volume_Oscillator) > 10  ? '#ff4d4d20' :
                                    parseInt(data.Volume_Oscillator) > 0   ? '#ff4d4d10' :
                                    parseInt(data.Volume_Oscillator) > -10 ? '#4caf5020' :
                                    parseInt(data.Volume_Oscillator) > -20 ? '#4caf5040' :
                                    parseInt(data.Volume_Oscillator) > -60 ? '#4caf5060' :
                                    '#4caf5080' ,
                                    height: 
                                    String(Math.abs(parseInt(data.Volume_Oscillator)/2))+'px'
                                     }">
                                        成交量 {{data.Volume_Oscillator}}
                                    </div>
                                </div>

                                <div style="padding-top: 14px;">
                                    <span style="    color: #285376b8;">
                                        成交股數 {{ parseInt(data.成交股數)}} 
                                    </span>
                                    
                                    <v-tooltip slot="append" bottom>
                                        <template v-slot:activator="{ on }">
                                            <v-icon v-on="on" v-if="data.flag=='Y'　&& (item.highlight_date <= header.value  && item.highlight_date !='')  " color="#a9a260">mdi-weather-sunny
                                            </v-icon>
                                        </template>
                                        <span>【表現佳】成交量>500 ，短期量增</span>
                                    </v-tooltip>
                                    <v-tooltip slot="append" bottom>
                                        <template v-slot:activator="{ on }">
                                            <v-icon v-on="on" v-if="data.MA_break　&& (item.highlight_date <= header.value  && item.highlight_date !='')" color="red">mdi-star-outline
                                            </v-icon>
                                        </template>
                                        <span>【MA_break】</span>
                                    </v-tooltip>
                                </div>
                            </div>
                        </template>
                    </template>
                    <template v-slot:item.rt_price="{ item }">
                        <span style="color: rgb(124, 169, 173);"
                            v-show="realtimedata.filter(x=>x.c==item.stock_number)[0]?.a">
                            {{
                            ((realtimedata.filter(x=>x.c==item.stock_number)[0]?.b/parseFloat(realtimedata.filter(x=>x.c==item.stock_number)[0]?.y)-1)*100).toFixed(2)}}
                        </span>
                    </template>
                    <template v-slot:item.rt_量="{ item }">
                        <span style="color: rgb(124, 169, 173);"
                            v-show="realtimedata.filter(x=>x.c==item.stock_number)[0]?.a">
                            {{(realtimedata.filter(x=>x.c==item.stock_number)[0]?.v/parseFloat(item.成交股數)).toFixed(1)}}
                        </span>
                    </template>
                </v-data-table>
                <!-- 弹出窗口 -->
                <v-dialog v-model="dialog" max-width="90vw">
                    <v-card>
                        <v-card-title class="headline">{{ selectedItem?.stock_number }}</v-card-title>
                        <v-card-text style="padding: 0; height:90vh;">
                            <!-- 在這裡添加iframe -->
                            <iframe v-if="selectedItem"
                                :src="`${url}[${selectedItem.stock_number}]${selectedItem.Type.replace('*', '')}.html`"
                                width="80%" frameborder="0" style="padding: 0; height:80vh;">
                            </iframe>
                        </v-card-text>
                        <v-card-actions>
                            <v-spacer></v-spacer>
                            <v-btn color="primary" text @click="dialog = false">Close</v-btn>
                        </v-card-actions>
                    </v-card>
                </v-dialog>
            </v-container>
        </v-app>
    </div>
    <script>
        var app = new Vue({
            el: '#app',
            vuetify: new Vuetify(),
            data() {
                return {
                    sync: false,
                    url: '',
                    jsonData: [],
                    dummydata: [],
                    headers: [],
                    filters: {},
                    arrcount: 0,
                    uniqueValues: {},
                    //sortBy: ['增縮3天'],
                    //sortBy:['均價_%'], 
                    sortBy: ['Volume_Oscillator'],
                    //sortBy: ['當日漲跌'],
                    sortDesc: [true],
                    dialog: false,
                    selectedItem: null,
                    realtimedata: [],
                };
            },
            created() {
                this.url = window.location.href.split('/').slice(0, 4).join('/') + '/Html/';
                let urlParams = new URLSearchParams(window.location.search);
                if (urlParams.has('sync')) {
                    this.sync = urlParams.get('sync') == 'Y';
                }
                this.init();
                window.scrollTo({ left: document.body.scrollWidth, behavior: 'smooth' });
            },
            computed: {
                filteredData() {
                    return this.jsonData.filter(item => {
                        return Object.keys(this.filters).every(key => {
                            const filterValues = this.filters[key];

                            if (!filterValues || filterValues.length === 0) return true;
                            const value = item[key] ? item[key].toString() : '';
                            const a = this.isNumberField(key);

                            if (Array.isArray(filterValues) && a) {
                                const [min, max] = filterValues;
                                const numericValue = parseFloat(value);
                                return !isNaN(numericValue) && numericValue >= min && numericValue <= max;
                            } else {
                                return filterValues.includes(value);
                            }
                        });
                    });
                }
            },
            methods: {
                async init() {
                    await this.loadExcelData();
                    if (this.sync) {
                        await this.sync_realtime();
                    }
                    this.loadExcelData();
                },
                async sync_realtime() {
                    var vm = this
                    try {
                        console.log('Starting the process...');
                        const result = await main(this.jsonData)
                            .then(result => {
                                console.log('Promise result:', result);   // 處理結果
                                vm.realtimedata = result
                            })
                    } catch (error) {
                        console.error('Error in init:', error);  // 捕獲初始化過程中的錯誤
                    }
                    console.log('done');  // 確保這個訊息在主流程完成後顯示
                },
                openDialog(item) {
                    this.selectedItem = item;
                    this.dialog = true;
                },
                isNumberField(field) {
                    return field !== 'stock_number' && this.jsonData.some(item => {
                        const value = item[field];
                        return value != null && !isNaN(parseFloat(value)) && isFinite(value);
                    });
                },
                formatDesc(desc) {
                    return desc.replace(/\*\*/g, '<br/>'); // 把 `**` 轉換成 `<br/>`
                },
                sync_data() {
                    this.jsonData.forEach(item => {
                        var price = this.realtimedata.filter(x => x.c == item.stock_number)[0]?.a;
                        item.rt_price = ((this.realtimedata.filter(x => x.c == item.stock_number)[0]?.b / parseFloat(this.realtimedata.filter(x => x.c == item.stock_number)[0]?.y) - 1) * 100).toFixed(2);
                        var vol = this.realtimedata.filter(x => x.c == item.stock_number)[0]?.v;
                        item.rt_量 = (vol / parseFloat(item.成交股數)).toFixed(1);
                    })
                },
                filterfunc() {
                    this.jsonDatabk = this.jsonData
                    //this.jsonData = this.jsonDatabk.filter(x => x.max量能 != 100 && x.count量能 > 0)
                    //app.jsonData=app.jsonData.filter(x => isNaN(x.量價差天)) 
                },
                async loadExcelData() {
                    let urlParams = new URLSearchParams(window.location.search);

                    file = './Result/check.xlsx'
                    if (urlParams.has('d')) {
                        if (urlParams.get('d') == 'H') {
                            file = './Result/checkH.xlsx'
                        }
                        if (urlParams.get('d') == 'sun') {
                            file = './Result/checksun.xlsx'
                        }
                        if (urlParams.get('d') == 'HS') {
                            file = './Result/checkHS.xlsx'
                        }
                        if (urlParams.get('d') == 'sunmy') {
                            file = './Result/checksunmy.xlsx'
                        }
                        if (urlParams.get('d') == 'yaya') {
                            file = './Result/checkyaya.xlsx'
                        }
                        if (urlParams.get('d') == 'over') {
                            file = './Result/checkover.xlsx'
                        }
                        if (urlParams.get('d') == 'type') {
                            file = './Result/checksun/' + urlParams.get('type') + '.xlsx'
                        }
                    }

                    var resultdata = ''
                    if (urlParams.has('date')) {
                        resultdata = 'Result' + urlParams.get('date')
                        file = file.replace('Result', resultdata)
                    }


                    await fetch(file)
                        .then(response => response.arrayBuffer())
                        .then(data => {
                            const workbook = XLSX.read(data, { type: 'array' });
                            const sheetName = workbook.SheetNames[0];
                            const worksheet = workbook.Sheets[sheetName];
                            const json = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

                            if (json.length > 0) {
                                this.headers = json[0].map(header => ({ text: header, value: header }));
                                this.$renameHeaders(this.headers);
                                //Excel data to json 
                                this.jsonData = json.slice(1).map(row => {
                                    const rowData = {};
                                    this.headers.forEach((header, i) => {
                                        rowData[header.value] = row[i];
                                    });
                                    return rowData;
                                });

                                var dates = [...new Set(this.jsonData.map(x => x.日期))].sort()

                                //const baseFields = ['desc', '營業毛利率', '營業利益率', '淨值倍率', '殖利率', '貝他值', '成交量', 'Type1',];// 'stock_number'
                                const baseFields = []
                                //(價)
                                const trendFields = ['均價_%', 'highlight_date', '價_起始日期',];
                                const dateFields = ['量價差天',];
                                const miscFields = ['diff_quote', '當日漲跌', '總價差', '漲跌BY3天', '增縮3天', 'type']; //, 'count','總量增縮', 
                                //(量)
                                const volumeFields = ['量能均', '量能差', '量能', 'Volume_Oscillator']; //  ,'遠交易量' , '成交股數' ,'量','max量能', 'count量能',  

                                var arr = [...baseFields, ...trendFields, 'rt_price', ...dateFields, ...miscFields, ...volumeFields];
                                if (!this.sync) {
                                    arr = [...baseFields, ...trendFields, ...dateFields, ...miscFields, ...volumeFields];
                                }

                                //this.arrcount = arr.length
                                this.arrcount = dates.length

                                arr.reverse().forEach(element => {
                                    dates.push(element) //dates.unshift(element) 
                                });

                                this.headers = dates.map(header => ({ text: header, value: header }));

                                const transformedData = this.jsonData

                                var dummydata = Array.from(
                                    new Map(transformedData.map(item => [item.stock_number, item])).values()
                                );

                                dummydata.map((item, index) => {
                                    const dummydataItem = item

                                    if (!!!item.datalist) {
                                        const datalist = this.jsonData.filter(q => q.stock_number == item.stock_number)
                                        dummydataItem.datalist = datalist
                                        const maxdate = datalist.map(x => x.日期).reduce((a, b) => a > b ? a : b);
                                        const mindate = datalist.map(x => x.日期).reduce((a, b) => a < b ? a : b);
                                        const maxdateitem = this.jsonData.filter(q => q.stock_number == item.stock_number && q.日期 == maxdate)[0]

                                        //## 處理Header資料
                                        dummydataItem.箱型力量 = maxdateitem.箱型力量
                                        dummydataItem.箱型力量_5均 = maxdateitem.箱型力量_5均
                                        dummydataItem.highlight_date = maxdateitem.highlight_date
                                        dummydataItem.遠交易量 = maxdateitem.遠交易量
                                        dummydataItem.Volume_Oscillator = maxdateitem.Volume_Oscillator
                                        dummydataItem.量能 = maxdateitem.量能
                                        dummydataItem['均價_%'] = maxdateitem['均價_%']
                                        dummydataItem.desc = dummydataItem.desc.replace('**', '<br/>')

                                        // 總價差 (依據highlight_date 來計算，如果沒有使用mindate)
                                        //const targerdate = datalist.find(x => x.日期 === datalist[0].highlight_date)?.日期 ?? mindate;
                                        const targerdate = mindate
                                        dummydataItem.總價差 = parseFloat(((datalist.filter(q => q.日期 == maxdate)[0].now_price / datalist.filter(q => q.日期 == targerdate)[0].now_price) - 1) * 100).toFixed(2);

                                        // 計算"量"  Volume_Oscillator
                                        let arrlist = datalist.map(x => parseInt(x.Volume_Oscillator)).slice().reverse()
                                        let differences = arrlist.slice(0, -1).map((item, index) => arrlist[index + 1] - item)
                                        dummydataItem.總量增縮 = differences.reduce((acc, current) => acc + current, 0);

                                        //價_起始日期 取被判定flag＝Y (Untitled.ipynb ==>　MA5_%>=0, 成交量 > 500, 遠交易量>-15 ,短交易量>-15 )
                                        dummydataItem.價_起始日期 = dummydataItem.datalist.filter(y => y.flag == 'Y').map(x => x.日期).reduce((a, b) => a < b ? a : b, Infinity);
                                        dummydataItem.價_起始日期 = dummydataItem.價_起始日期 == Infinity ? '' : dummydataItem.價_起始日期;
                                        //dummydataItem.count = dummydataItem.datalist.filter(y => y.flag == 'Y')?.length;

                                        //## 處理明細資料
                                        dummydataItem.datalist.forEach((item, index) => {

                                            if (index < dummydataItem.datalist.length - 1) {
                                                item.量能差 = parseInt(item.量能 - dummydataItem.datalist[index + 1].量能);
                                            } else {
                                                item.量能差 = 0; // 或者可以設定為 null/undefined 依據需求
                                            }
                                            let dl = dummydataItem.datalist.filter(q => q.日期 <= item.日期);

                                            let arrlist_dl = dl.map(x => parseInt(x.Volume_Oscillator)).slice().reverse()
                                            let differences_dl = arrlist_dl.slice(0, -1).map((item, index) => arrlist_dl[index + 1] - item)
                                            item.增縮BY3天 = differences_dl.slice(-3).reduce((acc, current) => acc + current, 0);

                                            let arrlist_dll = dl.map(x => parseInt(x._quote)).slice().reverse()
                                            item.漲跌BY3天 = arrlist_dll.slice(-3).reduce((acc, current) => acc + current, 0)

                                            let arrlist_dll1 = dl.map(x => parseInt(x.量能)).slice().reverse()
                                            item.量能均 = arrlist_dll1.slice(-3).reduce((acc, current) => acc + current, 0)
                                            item.量能均 = parseInt(item.量能均 / 3)

                                        });

                                        //## 二次處理Header資料 (放這裡是因為要經過明細計算才會得到處理)
                                        var datess = [...new Set(this.jsonData.map(x => x.日期))].sort()
                                        var datalist_last_date = datalist.find(x => x.日期 === datess.slice(-1)[0])
                                        dummydataItem.當日漲跌 = datalist_last_date?._quote;
                                        dummydataItem.增縮3天 = datalist_last_date?.增縮BY3天;
                                        dummydataItem.漲跌BY3天 = datalist_last_date?.漲跌BY3天;
                                        dummydataItem.量能差 = datalist_last_date?.量能差;
                                        dummydataItem.量能均 = datalist_last_date?.量能均;

                                        //確認 "價" "量" 起來差距日
                                        const date1 = new Date(dummydataItem.highlight_date); // 開始日期 highlight_date(價)
                                        const date2 = new Date(dummydataItem.價_起始日期);     // 結束日期 價_起始日期    (價+量)
                                        const diffTime = date2 - date1; // 取得毫秒數差距
                                        const diffDays = diffTime / (1000 * 60 * 60 * 24); // 轉換為天數
                                        dummydataItem.量價差天 = diffDays
                                    }
                                    return dummydataItem;
                                });
                                this.jsonData = dummydata//.filter(x => x.Volume_Oscillator > -20 && x.量能差 > 0 && x.漲跌BY3天 > -10)
                                
                            }
                            if (this.realtimedata.length > 0) {
                                this.sync_data();
                            };
                        })
                        .catch(error => console.error('Error loading Excel file:', error));
                },
            }
        });
    </script>
</body>

</html>